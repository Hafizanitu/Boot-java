//download database mysql JDBC drievr ->unzip-> = -> project structure ->libary -> add
// craete an database on server
//Normal database Connection

import java.sql.*; // important to use sql based program

public class Main {
    public static void main(String[] args) {
        // To connect Java to the Xampp database we have to fast download :
        // Download SQL connector from: https://dbschema.com/jdbc-driver/mysql.html?srsltid=AfmBOoqKMLOy857t4QpVwAfX6Tv4ShbyLJtBXouEA5BctsVEPXbzIZ2K
        // Now open intellij idea and open a project, now go to the top right side of the setting
        // Click project structure > libraries > click + > connect the sql connector

        // to connect the database we need to have 3 information the link,username and user password
        // url = jdbc:mysql://localhost:3306/database_name
        String url = "jdbc:mysql://localhost:3306/student_management";
        String userName = "root";
        String userPassword = "";
        try {
            Connection connection = DriverManager.getConnection(url,userName,userPassword);
            Statement statement = connection.createStatement();
            // query to fetch all the data from the students table
            String sqlQueries = "Select * from students;";
            ResultSet resultSet = statement.executeQuery(sqlQueries);
            while(resultSet.next()){
                System.out.println( resultSet.getString("name")+ "|" + resultSet.getString("address") + "|" + resultSet.getString("gmail") );
            }
            // To insert information to the database:
            String insertQueries = "insert into students(name,address,gmail) values ('lsd','chandpur','lsd@gmail.com')";
            statement.executeUpdate(insertQueries);

            //Update information into the  queries :
            String updateQuery = "UPDATE students SET name = 'RifatSalma' WHERE ID = 3;";
            statement.execute(updateQuery);

            // delete information query
            String deleteQuery ="DELETE FROM students WHERE ID = 4;";
            statement.execute(deleteQuery);

        } catch (SQLException e) {
            System.out.println("Problem: " +e.getMessage());
        }

    }
}

// Java JDBC transaction code-mannual database controlling

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Main {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/student_management";
        String userName = "root";
        String userPassword = "";
        try {
            Connection connection = DriverManager.getConnection(url, userName, userPassword);
            // By default, when we run an SQL command in Java (like inserting, updating, or deleting data),
            // it gets saved to the database right away.
            // This is because auto-commit is turned on by default.
            // but when we use SetAutoCommit(false) - Don’t save anything automatically — we’ll decide when to save using commit()
            // by controlling manually we will be able to not update database if there is an error in updating value
            connection.setAutoCommit(false);
            Statement statement = connection.createStatement();
            try {
                String updateSql = "Update money Set money = money - 100 where id = 1";
                String updateSql2 = "Update money Set money = money + 200 where id = 1";
                String updateSql3 = "Update money Set money = money + 300 where id = 2";
                String updateSql4 = "Update money Set money = null where id = 3";
                statement.execute(updateSql);
                statement.execute(updateSql2);
                statement.execute(updateSql3);
                statement.execute(updateSql4);
                connection.commit(); // if everything is okay then update the database, if wrong raise exception
            } catch (SQLException e) {
                // when the queries are wrong then exception will be generated and rollback() method will be called
                // rollback function will be make the database into the previous state and the value will not update
                connection.rollback();
                System.out.println("This is inner problem + " + e.getMessage());
            }
        } catch (SQLException e) {
            System.out.println("This is outer problem: " + e.getMessage());
        }
    }
}
//handles dynamic values 

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/student_management";
        String userName = "root";
        String userPassword = "";
        try {
            Connection connection = DriverManager.getConnection(url,userName,userPassword);
            // insert query with prepare statement;
            String sqlQuery = "insert into students(name,address,gmail) values (?,?,?); ";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery);
            preparedStatement.setString(1,"Saiket");
            preparedStatement.setString(2,"uttara sector 1");
            preparedStatement.setString(3,"saikatGain@gmail.com");
            preparedStatement.execute();
        } catch (SQLException e) {
            System.out.println("Problem: " + e.getMessage());
        }

    }
}
